#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

//	Если НЕ РольДоступна("Администратор") Тогда
//		
//		Элементы.СоздаватьВидыИТСПриЗагрузке.Видимость = Ложь;
//		
//	КонецЕсли;
		
//	Журналирование.ЗаписатьЛог(,,"Форма списка ИТС", НЕ РольДоступна("ДолжностьМенеджерПоПродажам") И НЕ РольДоступна("ДолжностьМенеджерПроектов"));		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "Файл NewSub Excel (*.xlsx)|*newsub*.xlsx"; 
	Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Ложь;

	НачатьПомещениеФайла(Новый ОписаниеОповещения("ЗагрузитьИзExcelЗавершение", ЭтотОбъект), , Диалог, Истина, УникальныйИдентификатор);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьИзExcelЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

    Если Результат Тогда

		РасширениеФайла = ПолучитьРасширениеФайла(ВыбранноеИмяФайла);
		ЗагрузитьДанныеНаСервере(Адрес, РасширениеФайла);
		Элементы.Список.Обновить();

    КонецЕсли 

КонецПроцедуры

 &НаСервере
Функция ПодготовитьТаблицуСДанными(АдресХранилищаФайла, РасширениеФайла, ДатаОтчета) 
	
	ИмяФайлаСервер = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ФайлИмпорта = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);
	ФайлИмпорта.Записать(ИмяФайлаСервер);
	

	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяФайлаСервер, СпособЧтенияЗначенийТабличногоДокумента.Текст);
		//ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("R1:R4"));
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;	
		
	СтрДатаОтчета = ТабличныйДокумент.Область("R1C1").Текст;
	КлючевоеСловоПередДатой = "выпуск";
	ПозицияДаты = СтрНайти(СтрДатаОтчета, КлючевоеСловоПередДатой,НаправлениеПоиска.СКонца);
	
	Попытка
	
		ДатаОтчетаСтр = СокрЛП(Сред(СтрДатаОтчета, ПозицияДаты + СтрДлина(КлючевоеСловоПередДатой) + 1));
		ДатаОтчета = Дата(Прав(ДатаОтчетаСтр, 4),Сред(ДатаОтчетаСтр,4,2), Лев(ДатаОтчетаСтр,2));
		
	Исключение
				
		СообщениеНеНайденаДата = Новый СообщениеПользователю;
		СообщениеНеНайденаДата.Текст = "Не найдена дата отчета в файле, будет загружен текущим месяцем.";
		СообщениеНеНайденаДата.Сообщить();			
				
	КонецПопытки;
		
	ПостроительЗапросаТД = Новый ПостроительЗапроса;
	ПостроительЗапросаТД.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область(5,,ТабличныйДокумент.ВысотаТаблицы));
	ПостроительЗапросаТД.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ПостроительЗапросаТД.ЗаполнитьНастройки();
	ПостроительЗапросаТД.Выполнить();
	
	ТаблицаПромежуточныхДанных = ПостроительЗапросаТД.Результат.Выгрузить();
	
	УдалитьФайлы(ИмяФайлаСервер);
	
	Возврат	ТаблицаПромежуточныхДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьВидПодписки(ВидИТС, КодВидаИТС, Отказ, МассивКодовСОшибкой)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыПодписокИТС.Ссылка КАК Ссылка,
		|	ВидыПодписокИТС.Наименование,
		|	ВидыПодписокИТС.Код
		|ИЗ
		|	Справочник.ВидыПодписокИТС КАК ВидыПодписокИТС
		|ГДЕ
		|	ВидыПодписокИТС.Код = &КодВидаИТС
		|	И НЕ ВидыПодписокИТС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыПодписокИТС.Ссылка КАК Ссылка,
		|	ВидыПодписокИТС.Наименование,
		|	ВидыПодписокИТС.Код
		|ИЗ
		|	Справочник.ВидыПодписокИТС КАК ВидыПодписокИТС
		|ГДЕ
		|	ВидыПодписокИТС.Наименование = &Наименование
		|	И НЕ ВидыПодписокИТС.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодВидаИТС", КодВидаИТС);
	Запрос.УстановитьПараметр("Наименование", ВидИТС);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если НЕ РезультатЗапроса.Следующий() Тогда

		Если СоздаватьВидыИТСПриЗагрузке Тогда
			
			ВидПодпискиИТС = Справочники.ВидыПодписокИТС.СоздатьЭлемент();
			ВидПодпискиИТС.Наименование = ВидИТС;
			ВидПодпискиИТС.Код = КодВидаИТС;
			ВидПодпискиИТС.Записать();
			
			Возврат ВидПодпискиИТС.Ссылка;

		Иначе
			
			Если МассивКодовСОшибкой.Найти(КодВидаИТС) = Неопределено Тогда
	
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Вид подписки ИТС к кодом " + КодВидаИТС + " (" + ВидИТС + ") не найден";
				Сообщение.Сообщить();
				МассивКодовСОшибкой.Добавить(КодВидаИТС);
				
			КонецЕсли;			

		КонецЕсли;
			
		Отказ = Истина;
		Возврат Неопределено;

	Иначе
		
		Рез = РезультатЗапроса.Ссылка;
		
		Если РезультатЗапроса.Наименование <> ВидИТС Тогда
			
			Если МассивКодовСОшибкой.Найти(КодВидаИТС) = Неопределено Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "!!! Внимание !!! Наименование ИТС в файле отличается от наименования в CRM " + ВидИТС + " <> " + РезультатЗапроса.Наименование;
				Сообщение.Сообщить();
				МассивКодовСОшибкой.Добавить(КодВидаИТС);
			
			КонецЕсли;
			
			Отказ = Истина;
								
		КонецЕсли;
				
		Если РезультатЗапроса.Код <> КодВидаИТС Тогда
			
			Если МассивКодовСОшибкой.Найти(КодВидаИТС) = Неопределено Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "!!! Внимание !!! Код вида ИТС в файле отличается от кода в CRM " + КодВидаИТС + " <> " + РезультатЗапроса.Код;
				Сообщение.Сообщить();
						
			КонецЕсли;				
					
			Отказ = Истина;
						
		КонецЕсли;
				
		Возврат Рез;
	
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(Адрес, РасширениеФайла)	

	УстановитьПривилегированныйРежим(Истина);	
	
	ДатаОтчета = НачалоМесяца(ТекущаяДата());
	
	ХЛС = ПодготовитьТаблицуСДанными(Адрес, РасширениеФайла, ДатаОтчета) ;            
			
	Отказ = Ложь;	
	
	МассивКодовСОшибкой = Новый Массив;
	
	НачатьТранзакцию();		
			
	Для Каждого СтрокаФайла Из ХЛС Цикл

		//@skip-check query-in-loop
		ВидПодпискиИТС = ПолучитьВидПодписки(СтрокаФайла.Вид1СИТС, СтрокаФайла.НаименованиеВида1СИТС, Отказ, МассивКодовСОшибкой);
		
		РегНомер = СтрокаФайла.Регномер;
		
		ДатаНач = СтрокаФайла.Начало;
		ДатаКон = СтрокаФайла.Конец;
		ДатаРегистрации = СтрокаФайла.ДатаРегистрацииДоговора1СИТС;
		ДанныеПолей	= СтрокаТЗВСтрокуJSON(ХЛС.Колонки, СтрокаФайла);
		
		//@skip-check query-in-loop
		ЗагрузитьСтрокуОтчетаИТС(ДатаОтчета, РегНомер, ВидПодпискиИТС, СтрокаФайла.ИННЕДРПОУУкрПользователя, СтрокаФайла.НаименованиеВида1СИТС, ДатаНач, ДатаКон, ДатаРегистрации, ДанныеПолей);
		
	КонецЦикла;			
	
	Если НЕ Отказ Тогда
	
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		ОтменитьТранзакцию();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция СтрокаТЗВСтрокуJSON(КолонкиТЗ, СтрокаТЗ) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	Для Каждого Колонка Из КолонкиТЗ Цикл
		СтруктураДанных.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();

	
	Возврат СтрокаJSON;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРасширениеФайла(ИмяФайла) Экспорт
	
	РасширениеФайла 		= ИмяФайла;
	ПозицияПоследнейТочки 	= СтрНайти(РасширениеФайла, ".", НаправлениеПоиска.СКонца);
	РасширениеФайла 		= Сред(РасширениеФайла, ПозицияПоследнейТочки + 1);
	
	Возврат ?(РасширениеФайла = ИмяФайла, "", РасширениеФайла);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСтрокуОтчетаИТС(ДатаОтчета, РегНомер, ЕхВидИТС, ЕхИНН, ЕхНаименование, ДатаНач, ДатаКон, ДатаРегистрации, ДанныеПолей)
	
			ИТС_НаборЗаписей = РегистрыСведений.А_ИТС.СоздатьНаборЗаписей();
			
			ИТС_НаборЗаписей.Отбор.Период.Установить(ДатаОтчета);
			ИТС_НаборЗаписей.Отбор.РегНомер.Установить(РегНомер);
			ИТС_НаборЗаписей.Отбор.ВидПодпискиИТС.Установить(ЕхВидИТС);
			ИТС_НаборЗаписей.Отбор.ДатаРегистрацииПодписки.Установить(ДатаРегистрации);
			ИТС_НаборЗаписей.Прочитать();
			
			ИТС_НаборЗаписей.Очистить();
			
			НоваяЗапись = ИТС_НаборЗаписей.Добавить();
			
			НоваяЗапись.Период = ДатаОтчета;
			НоваяЗапись.РегНомер = РегНомер;
			НоваяЗапись.ВидПодпискиИТС = ЕхВидИТС;
			НоваяЗапись.ДатаРегистрацииПодписки = ДатаРегистрации;
			
			Попытка
			
				РегНомерЧисло = Формат(РегНомер, "ЧГ=0");
				
			Исключение
				
				РегНомерЧисло = 0;
				
			КонецПопытки;						
			
			ВыбИНН = Формат(ЕхИНН, "ЧГ=0");
			
			Если ЗначениеЗаполнено(ВыбИНН) Тогда
			
				Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ВыбИНН);
				
			ИНаче
				
				Контрагент = Неопределено;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				
				НоваяЗапись.Контрагент = Контрагент;
				
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	КонтрагентыРегНомера.Ссылка
				               |ИЗ
				               |	Справочник.Контрагенты.РегНомера КАК КонтрагентыРегНомера
				               |ГДЕ
				               |	КонтрагентыРегНомера.РегНомер = &Значение";
				
				Запрос.УстановитьПараметр("Значение", РегНомерЧисло);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() Тогда
				
					НоваяЗапись.Контрагент = Выборка.Ссылка;	
					
				Иначе
					
					НоваяЗапись.Комментарий = "Не найден: " + СокрЛП(Формат(ЕхНаименование));
					
				КонецЕсли;
				
			КонецЕсли;
						

			НоваяЗапись.ВидИТС 				= ?(ЗначениеЗаполнено(ЕхВидИТС.СокращенноеНаименование), ЕхВидИТС.СокращенноеНаименование, ЕхВидИТС.Наименование);
			НоваяЗапись.НачалоПодписки 		= Дата(Прав(ДатаНач, 4),Сред(ДатаНач,4,2), Лев(ДатаНач,2));
			НоваяЗапись.ОкончаниеПодписки 	= Дата(Прав(ДатаКон, 4),Сред(ДатаКон,4,2), Лев(ДатаКон,2));			
			НоваяЗапись.Доставлен			= Истина;				
			НоваяЗапись.ПоляФайлаЗагрузки	= ДанныеПолей;
			ИТС_НаборЗаписей.Записать();

	
КонецПроцедуры

#КонецОбласти

