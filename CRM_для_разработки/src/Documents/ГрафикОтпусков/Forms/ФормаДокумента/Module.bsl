
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	
	//Если НЕ РольДоступна("Администратор") Тогда
		
	//	Если Объект.Завершен Тогда
			
	//		ЭтаФорма.ТолькоПросмотр = Истина;    
			
	//	КонецЕсли;
		
	//	Элементы.Сотрудник.ТолькоПросмотр = Истина;
		
	//КонецЕсли;  
	
	//Test #1         
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Сотрудник = ПараметрыСеанса.ТекущийПользователь;
		
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьСписокНерабочихПраздничныхДней()  
	
	// Получаем в запросе нерабочие праздничные дни
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроизводственныйКалендарь.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	               |ГДЕ
	               |	ПроизводственныйКалендарь.НерабочиеПраздничныеДни";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Создаем список значений для передачи на клиент
	НерабочиеПраздничныеДни = Новый СписокЗначений;	
	
	Пока Выборка.Следующий() Цикл
	      	 
		НерабочиеПраздничныеДни.Добавить(Выборка.Период);
	
	КонецЦикла;

	Возврат НерабочиеПраздничныеДни;
	
КонецФункции


&НаКлиенте
Процедура НачалоОтпускаПриИзменении(Элемент)
	
	// Определяем кол-во нерабочих празд. дней между НачалоОтпуска и ОкончаниеОтпуска 
	СписокПраздников = ПолучитьСписокНерабочихПраздничныхДней();
	ТекущаяДата = Объект.НачалоОтпуска;
	КоличествоПраздников = 0; 
	
	Пока ТекущаяДата <= Объект.ОкончаниеОтпуска Цикл 
		
		Для каждого Праздник из СписокПраздников Цикл 		 
			
			Если НачалоДня(ТекущаяДата) = НачалоДня(Праздник.Значение) Тогда 				 
				 КоличествоПраздников = КоличествоПраздников + 1;
			КонецЕсли; 	
			 
		КонецЦикла;	
			
		ТекущаяДата = ТекущаяДата + 60 * 60 * 24;
		
	КонецЦикла;    	
	
	// Определяем кол-во дней отпуска
	Объект.ДнейОтпуска = Макс((Объект.ОкончаниеОтпуска - Объект.НачалоОтпуска - КоличествоПраздников * 60 * 60 * 24) / 60 / 60 / 24 + 1, 0);
	
КонецПроцедуры      

// Отправляем оповещение при записи документа, которое отлавливаем на форме списка
&НаСервереБезКонтекста
Процедура ПослеЗаписиНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписанГрафикОтпусков");
	ПослеЗаписиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)   
	
	// Проверка пересечения с датой начала отпуска в документах
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикОтпусков.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ГрафикОтпусков КАК ГрафикОтпусков
	               |ГДЕ
	               |	ГрафикОтпусков.НачалоОтпуска МЕЖДУ &НачалоНаФорме И &ОкончаниеНаФорме
	               |	И ГрафикОтпусков.Сотрудник = &ТекущийПользователь
	               |	И ГрафикОтпусков.Номер <> &ТекущийДокументНомер
				   |	И ГрафикОтпусков.Дата <> &ТекущийДокументДата   
				   |	И НЕ ГрафикОтпусков.ПометкаУдаления"; 
				   
				   
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("НачалоНаФорме", Объект.НачалоОтпуска); 
	Запрос.УстановитьПараметр("ОкончаниеНаФорме", КонецДня(Объект.ОкончаниеОтпуска));  
	Запрос.УстановитьПараметр("ТекущийДокументНомер", Объект.Номер);
	Запрос.УстановитьПараметр("ТекущийДокументДата", Объект.Дата);

	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		Если НЕ Выборка.Ссылка = неопределено Тогда
			Отказ = Истина;     
			Сообщить("Период отпуска пересекается с документом " + Строка(Выборка.Ссылка));
			
		КонецЕсли;  
	
	КонецЦикла;

	
	// Проверка пересечения с датой окончания отпуска в документах     
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикОтпусков.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ГрафикОтпусков КАК ГрафикОтпусков
	               |ГДЕ
	               |	ГрафикОтпусков.ОкончаниеОтпуска МЕЖДУ &НачалоНаФорме И &ОкончаниеНаФорме
	               |	И ГрафикОтпусков.Сотрудник = &ТекущийПользователь
	               |	И ГрафикОтпусков.Номер <> &ТекущийДокументНомер
				   |	И ГрафикОтпусков.Дата <> &ТекущийДокументДата
				   |	И НЕ ГрафикОтпусков.ПометкаУдаления"; 
   
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("НачалоНаФорме", Объект.НачалоОтпуска); 
	Запрос.УстановитьПараметр("ОкончаниеНаФорме", КонецДня(Объект.ОкончаниеОтпуска));  
	Запрос.УстановитьПараметр("ТекущийДокументНомер", Объект.Номер);
	Запрос.УстановитьПараметр("ТекущийДокументДата", Объект.Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
	
		Если НЕ Выборка.Ссылка = неопределено Тогда
			Отказ = Истина;     
			Сообщить("Период отпуска пересекается с документом " + Строка(Выборка.Ссылка));
			
		КонецЕсли;  
	
	КонецЦикла;

	// Проверка НачалоОтпуска <=  ОкончаниеОтпуска  
	Если Объект.НачалоОтпуска > КонецДня(Объект.ОкончаниеОтпуска) Тогда
		
		Отказ = Истина;
		Сообщить("Дата начала больше даты окончания отпуска");
		
	КонецЕсли;        
	
	
	//Проверка на нулевое количество дней отпуска
	Если Объект.ДнейОтпуска = 0 Тогда
		
		Отказ = Истина;
		Сообщить("Все выбранные даты приходятся на нерабочие праздничные дни");
		
	КонецЕсли;
	
КонецПроцедуры

























